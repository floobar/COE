# Init script

. $COE_ETC/variables.conf
. $COE_ETC/functions.conf

## esilent prints output even in silent mode
function esilent () { verb_lvl=$silent_lvl elog " [SILENT]: $@" ;}
function enotify () { verb_lvl=$ntf_lvl    elog " [NORMAL]: $@" ;}
function eok ()     { verb_lvl=$ntf_lvl    elog "[SUCCESS]: $@" ;}
function ewarn ()   { verb_lvl=$wrn_lvl    elog "[WARNING]: $@" ;}
function einfo ()   { verb_lvl=$inf_lvl    elog "   [INFO]: $@" ;}
function edebug ()  { verb_lvl=$dbg_lvl    elog "  [DEBUG]: $@" ;}
function eerror ()  { verb_lvl=$err_lvl    elog "  [ERROR]: $@" ;}
function ecrit ()   { verb_lvl=$crt_lvl    elog "  [FATAL]: $@" ;}
#function edumpvar () { for var in $@ ; do edebug "$var=${!var}" ; done }
function edumpvar () {
	for var in $@ ; do
		declare -p $var 2> /dev/null | grep -q '^declare \-a'
		if [ $? -ne 0 ] ; then
			edebug "$var=${!var}"
		else
			ind=$(echo $var | awk -F\[ '{print $NF}' | awk -F\] '{print $1}' )
			base=$(echo $var | awk -F\[ '{print $1}')
			edebug "declare -a $base"
			[ "a$ind" == "a$base" ] && ind="@" && var=${base}[@]
			if [ "a$ind" == "a@" ] ; then
				ind=0
				for val in ${!var} ; do
					edebug "${base}[$ind]=${val}"
					ind=$(($ind+1))
				done
			else
				edebug "${base}[$ind]=${!var}"
			fi
		fi
	done
}
# F_dumpvar dumps variables to that they can be resources
function F_dumpvar () {
	for var in $@ ; do
		declare -p $var
	done
}
function elog() {
	if [ $verbosity -ge $verb_lvl ]; then
		datestring=`date "+%Y-%m-%dT%H:%M:%S%z"`
		# Expand escaped characters, wrap at 70 chars, indent wrapped lines
		#echo -e "$datestring ${ScriptName}[${ScriptPid}] $@" | fold -w70 -s | sed '2~1s/^/  /' #>&3
		echo -e "$datestring ${ScriptName}[${ScriptPid}] $@"
	fi
}

# for each verbose level, create e corresponding _file function that dumps the content of a file correctly formatted
for lvl in silent notify ok warn info debug error crit ; do
	def="function e${lvl}_file() {
		while read line ; do
		e${lvl} \$line ;
		done <\${1:-/dev/null} ;
}"
	eval $def
done

function F_Open_Pipeout() {
	if [ $NO_JOB_LOGGING ] ; then
		einfo "Not logging to a logfile because -Z option specified."
	else
		[[ -d $G_LOG_DIR/$JobClass ]] || mkdir -p $G_LOG_DIR/$JobClass && chgrp dba $G_LOG_DIR/$JobClass && chmod 775 $G_LOG_DIR/$JobClass
		Pipe=${G_LOG_DIR}/$JobClass/${Job}_${G_DATETIME}.pipe
		mkfifo -m 700 $Pipe
		LOGFILE=${G_LOG_DIR}/$JobClass/${Job}_${G_DATETIME}.log
		exec 3>&1
		tee ${LOGFILE} <$Pipe >&3 &
		teepid=$!
		exec 1>$Pipe
		PIPE_OPENED=1
		enotify Logging to $LOGFILE
		enotify `who mom likes`
	fi
}

function F_Close_Pipeout() {
	if [ ${PIPE_OPENED} ] ; then
		exec 1<&3
		sleep 0.2
		ps --pid $teepid >/dev/null
		if [ $? -eq 0 ] ; then
			sleep 1
			kill  $teepid
		fi
		rm $Pipe
		unset PIPE_OPENED
	fi
}

function F_common_usage() {
	cat <<EOF
	Common Options:
		-e ent	Work with the entity ent rather than the current one.
			(Required for running scripts using the crontab, for example)
		-s	Run the script in silent mode.
		-V	Verbose: include info messages.
		-G	Debug: include all messages.
		-Z	No logging: by default F_Open_Pipeout logs to a script.
			With -Z the pipe is not open and the standard output must be redirected by hand.
		-R	Service Request (either JIRA issue or SNow code, default SELF_SERVICE)
		-u	User, defaults to \$(who mom likes | cut -d ' ' -f 1) or USER. It can be overwritten for 3rd party integration
		-h	Displays this help.
EOF
}

function F_parse_global_options() {
	G_PARSE_OPTIONS="shVGZe:u:R:"
	edebug "Start parsing global options"
	OPTIND=1
	while getopts ":${LOCAL_PARSE_OPTIONS}${G_PARSE_OPTIONS}" opt ; do
        case $opt in
		e)
                        enotify "-e specified: Setting environment for $OPTARG."
			if [ $CRS_EXISTS -eq 1 ] ; then
				dbrac $OPTARG
			else
				dbsingle $OPTARG
			fi

			;;
		u)
                        enotify "-u specified: user is $OPTARG."
			JOBUSER=$OPTARG
			;;
		R)
                        enotify "-R specified: Service Request is $OPTARG."
			SREQ=$OPTARG
			;;
                s)
			verbosity=$silent_lvl
                        edebug "-s specified: Silent mode"
                        ;;
                V)
			verbosity=$inf_lvl
                        edebug "-V specified: Verbose mode"
                        ;;
                G)
			verbosity=$dbg_lvl
                        edebug "-G specified: Debug mode"
                        ;;
		Z)
			NO_JOB_LOGGING="true"
                        edebug "-Z specified: Not logging to output file"
                        ;;
		h)
                        edebug "-h specified: Print help end exit"
			if [ `typeset -F Usage` ] ; then
				Usage
				F_common_usage
			else
				cat <<EOF
	Usage: $ScriptName [{Common Options}]
EOF
				F_common_usage
			fi
			FORCE_EXIT=0
                        ;;
                :)
                        eerror "Option -$OPTARG requires an argument."
                        exit 1
                        ;;
        esac
	done
	OPTIND=1
	edebug "End parsing global options"
	if [ $FORCE_EXIT ] ; then
		exit $FORCE_EXIT
	fi
}

function F_must_be() {
	if [ -n $1 ] ; then
		if [ "$USER" != "$1" ] ; then
			eerror "This script must run as $1."
			exit 1
		fi
	fi
}


function F_must_be_on() {
	if [ -n $1 ] ; then
		if [ `hostname` != "$1" ] ; then
			eerror "This script can only run on host $1."
			exit 1
		fi
	fi
}

function F_check_env_set() {
	## check if environment variables are set
	if [ -z $ORACLE_SID ] ; then
        	eerror "Variable \$ORACLE_SID not set. Please set the correct environment."
        	return 1
	fi
	if [ -z $ORACLE_HOME ] ; then
        	eerror "Variable \$ORACLE_HOME not set. Please set the correct environment."
        	return 1
	fi
	if [ -z $G_ORAVERSION ] ; then
        	eerror "Variable \$G_ORAVERSION not set. Please set the correct environment."
        	return 1
	fi
	return 0
}

function F_check_warn() {
	EXITCODE=$1
	shift
	if [ $EXITCODE -eq 0 ] ; then
		eok $@ succeded with exit code $EXITCODE
	else
		if [ "${_ERRMSG}" ] ; then
			ewarn "STDERR: ${_ERRMSG}"
		fi
		ewarn $@ failed with exit code $EXITCODE. The script will continue.
	fi
	# return the same code so other checks can follow this one inside the script
	return $EXITCODE
}

function F_check_exit() {
	EXITCODE=$1
	shift
	if [ $EXITCODE -eq 0 ] ; then
		eok $@ succeded with exit code $EXITCODE
	else
		if [ "${_ERRMSG}" ] ; then
			eerror "STDERR: ${_ERRMSG}"
		fi
		eerror $@ failed with exit code $EXITCODE. The script will exit.
		F_Close_Pipeout
		exit $EXITCODE
	fi
}

function F_try() {
        Command=$@
        edebug "Executing the following command:"
        edebug "  \`${Command}\`"
        exec 4>&1
        _ERRMSG=$( { eval ${Command} >&4 ; } 2>&1 )
        return $?
}

function F_validate_date() {
	# check if the format is "####-##-##_##:##:##"
	echo $1 | sed -r "s/^([0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}:[0-9]{2}:[0-9]{2}$)/valid:\1/" | grep ^valid >/dev/null
	if [ $? -eq 0 ] ; then
		DATEYYYY=`echo $1 | cut -c 1-4`
		DATEMM=`echo $1 | cut -c 6-7`
		DATEDD=`echo $1 | cut -c 9-10`
		DATEHH=`echo $1 | cut -c 12-13 | sed 's/^0*//'`
		DATEMI=`echo $1 | cut -c 15-16 | sed 's/^0*//'`
		DATESS=`echo $1 | cut -c 18-19 | sed 's/^0*//'`

		[[ $DATEHH -gt 23 ]] && return 1
		[[ $DATEMI -gt 59 ]] && return 1
		[[ $DATESS -gt 59 ]] && return 1

		thirty_one_days='0[1-9]|[12][0--9]|3[01]'
		thirty_days='0[1-9]|[12][0--9]|30'
		twenty_eight_days='0[1-9]|1[0-9]|2[0-8]'
		case $DATEMM in
			01|03|05|07|08|10|12)
				[[ `echo $DATEDD | sed 's/^0*//'` -le 31 ]] ;;
			04|06|09|11)
				[[ `echo $DATEDD | sed 's/^0*//'` -le 30 ]] ;;
			02)
				[[ `echo $DATEDD | sed 's/^0*//'`  -le 28 ]] || (( $DATEYYYY % 4 == 0 && ( $DATEYYYY % 100 != 0 || $DATEYYYY % 400 == 0 ) && $DATEDD == 29 )) ;;
    			*)
	       		  false ;;
		esac 
		if [ $? -eq 0 ] ; then
			return 0
		else
			return 1
		fi
	else
		return 1
	fi
}

function F_cleanup() {
	EXITCODE=$?
	if [ `typeset -F Cleanup` ] ; then
		edebug "Cleanup function defined. Executing it..."
		Cleanup $EXITCODE
		edebug "Cleanup function executed with return code $?"
	else
		edebug "No cleanup function defined."
	fi
}

function F_join_by { local IFS="$1"; shift; echo "$*"; }


cd /tmp
export G_LOG_DIR=/home/oracle/COE/logs
export G_DATE=`date +"%Y%m%d"`
export G_DATETIME=`date +"%Y%m%d_%H%M%S"`


####exec 3>&2 # logging stream (file descriptor 3) defaults to STDERR
verbosity=4 # default to show warnings and notify

### verbosity levels
silent_lvl=0
crt_lvl=1
err_lvl=2
wrn_lvl=3
ntf_lvl=4
inf_lvl=5
dbg_lvl=6

### Load colors by default
F_colordef

### Get base Job name (name of the script minus eventual .sh)
ScriptName=`basename $0`
ScriptPid=$$
Job=`basename $0 .sh`
JobClass=`basename $0 .sh`

### Register the cleanup function
trap F_cleanup EXIT

### Global options are parsed at the beginning. Contains parameters like debug, verbose, silent...
F_parse_global_options $@

SREQ=${SREQ:-SELF_SERVICE}
edebug "Service Request: $SREQ"

[ -z $MUSTBE ] || F_must_be $MUSTBE
[ -z $MUSTBEON ] || F_must_be_on $MUSTBEON

if [ "$JOBUSER" == "required" ] ; then
	# if real_user is not oracle or root, defaults to it
	L_real_user=`who mom likes | cut -d ' ' -f 1`
	if [ "$L_real_user" != "root" ] && [ "$L_real_user" != "oracle" ] && [ "$L_real_user" != "orasys" ] && [ "$L_real_user" != "sysctl" ] && [ "$L_real_user" != "rundeck" ] && [ "$L_real_user" != "" ]; then
		JOBUSER=`echo $L_real_user | tr '[A-Z]' '[a-z]'`
	else
		eerror "Cannot get real username. User required! Please specify your username with -u"
		exit 1
	fi
fi


edebug Init_Env loaded.
